function [lb,ub,dim,fobj] = ClassificationFunction(F)

fobj = @ClassificationFunction1;
        lb=[1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1];
        ub=[4	2	2	2	2	2	2	2	3	4	3	4	4	8	3	2	2	8]; 
        dim=18;
end

function AccuracyT = ClassificationFunction1(X)

X = [
4	2	1	1	1	1	1	2	1	2	2	2	4	8	1	1	2	2
3	2	1	1	2	2	1	2	1	3	3	2	3	4	2	2	2	2
3	2	2	2	2	2	2	2	1	4	3	3	4	8	3	2	2	7
3	1	1	1	1	2	1	2	1	3	3	4	4	4	3	1	2	6
3	1	1	1	1	1	1	1	1	2	2	4	3	5	1	2	2	1
2	1	1	1	1	1	1	2	1	3	3	3	3	6	3	1	2	4
2	2	1	1	1	1	1	2	1	2	3	2	3	8	2	1	1	1
3	2	1	1	1	2	1	2	1	2	2	2	2	1	3	1	1	1
2	2	1	1	1	1	1	2	1	3	2	2	2	8	3	1	2	5
2	1	1	1	1	1	1	2	1	2	2	3	3	5	3	1	1	2
2	2	2	1	2	2	1	2	1	3	2	4	3	5	1	2	2	3
4	2	1	1	1	2	1	1	1	3	3	4	3	8	3	2	2	2
4	2	1	1	1	1	1	2	1	2	2	2	2	3	2	1	1	1
4	1	1	1	1	2	1	2	1	4	2	2	4	7	3	2	2	2
3	2	2	2	2	2	2	2	3	1	1	2	2	8	1	2	2	4
2	2	1	1	1	2	1	2	1	2	3	3	3	5	3	2	2	2
3	2	1	1	1	2	1	2	1	2	3	3	3	2	2	2	2	3
2	2	1	1	1	2	1	1	1	2	2	2	3	5	2	1	2	2
3	1	1	1	1	1	1	2	1	2	2	2	3	2	1	2	2	1
2	2	1	1	1	1	1	2	1	3	3	3	3	2	2	2	1	1
3	1	1	1	1	1	1	2	1	2	2	4	2	4	3	2	2	3
4	1	1	1	2	2	1	2	1	3	3	3	4	5	3	2	2	4
4	2	1	1	2	2	1	2	1	4	3	4	3	4	2	2	2	2
3	2	1	1	1	1	1	2	1	2	2	2	2	5	1	1	1	1
3	1	1	1	1	1	1	2	2	1	2	2	2	8	3	1	2	8
3	1	1	1	1	2	1	1	1	3	2	3	3	8	3	2	2	2
4	1	1	1	1	2	1	2	1	3	3	4	2	4	3	2	2	4
4	1	1	1	1	1	1	2	1	3	2	4	4	8	3	2	2	1
4	2	1	1	1	1	1	2	1	2	2	2	3	3	2	2	2	1
3	1	1	1	1	1	1	1	1	2	2	4	2	8	2	2	2	1
4	2	1	1	1	2	1	2	1	4	3	3	3	7	3	2	2	3
2	1	1	1	1	1	1	2	1	3	2	3	3	8	3	2	2	3
2	1	1	1	1	1	1	1	1	2	3	2	2	8	1	2	1	1
2	2	1	1	1	1	1	1	1	1	2	2	3	3	1	1	1	1
4	2	1	1	2	2	1	2	1	3	3	4	3	4	3	2	2	2
2	2	2	1	2	2	1	2	1	3	3	3	3	8	3	1	2	2
3	1	1	1	2	2	2	1	3	1	1	4	2	5	3	1	2	4
3	1	1	1	1	2	1	2	1	4	3	4	2	4	3	2	2	6
2	1	1	1	1	1	1	2	1	3	3	2	3	4	3	2	2	2
2	1	1	1	1	1	1	2	1	2	2	2	1	7	1	2	2	2
2	1	1	1	1	2	1	2	1	2	2	3	3	3	3	1	2	1
2	2	2	1	2	2	2	2	1	4	2	2	2	4	3	2	2	6
3	2	2	1	1	2	1	1	1	3	2	3	3	4	3	1	2	2
4	2	1	1	2	1	1	2	1	3	3	3	3	2	2	2	2	3
3	2	2	2	2	2	2	1	2	2	2	4	2	4	3	2	2	7
2	1	1	1	1	1	1	2	1	2	2	2	2	8	2	2	2	1
3	2	2	1	2	1	1	2	1	2	2	3	3	8	3	1	2	1
4	1	1	1	1	1	1	1	2	1	3	4	2	8	1	2	2	1
3	2	2	1	1	2	1	1	1	2	3	3	3	5	2	1	2	2
2	2	2	1	1	1	1	2	1	2	2	4	3	8	2	2	2	2
2	1	1	1	1	1	1	1	1	1	1	2	2	3	1	2	2	1
3	2	1	1	1	2	1	2	1	2	2	2	4	8	3	1	2	3
3	1	1	1	1	1	2	1	1	2	2	4	3	5	2	1	2	1
2	2	1	1	2	2	1	1	1	3	3	4	3	4	3	1	1	1
2	2	2	1	2	2	1	1	1	2	2	3	3	4	2	1	2	1
4	1	1	1	1	1	1	2	1	2	2	3	3	3	3	2	1	1
2	1	1	1	1	1	1	2	1	3	2	4	2	8	3	2	2	4
4	2	1	1	2	2	1	2	1	2	3	2	3	2	3	2	2	4
4	2	2	2	2	2	2	2	1	4	3	4	4	7	3	2	2	8
2	2	2	1	2	2	1	2	1	3	3	3	3	8	3	2	2	2
4	1	1	1	1	1	1	2	1	4	2	2	4	7	3	2	2	7
3	2	2	1	2	2	1	2	1	3	2	2	3	4	1	2	2	1
3	1	1	1	1	2	1	2	1	4	2	4	4	2	3	2	2	3
4	2	1	1	1	2	1	1	1	2	3	2	3	2	2	1	1	1
2	2	1	1	1	1	1	1	1	2	2	3	3	5	2	2	2	1
4	1	1	1	2	1	2	2	1	3	2	3	4	5	3	2	2	7
2	1	1	1	1	1	1	2	1	4	3	4	4	5	3	2	2	5
3	2	2	1	2	2	1	1	1	3	3	4	3	4	2	2	2	3
2	1	1	1	1	1	1	1	1	2	3	2	3	3	2	2	1	1
2	1	1	1	1	1	1	2	1	3	2	2	2	6	3	2	2	6
3	2	1	1	1	2	1	2	1	3	3	3	3	4	3	2	2	1
3	1	1	1	1	1	1	1	1	2	2	2	2	5	1	1	2	2
4	2	1	1	2	2	1	1	1	1	3	3	3	3	3	2	2	3
3	1	1	1	1	1	1	2	1	4	3	3	4	5	3	2	2	3
2	1	1	1	1	2	1	1	1	2	2	2	2	3	1	1	1	1
4	2	2	1	2	2	1	2	1	3	3	4	3	8	2	2	2	3
4	2	2	1	1	1	1	2	1	2	2	2	3	3	2	2	2	2
3	1	1	1	2	1	1	2	1	2	3	3	3	5	3	1	1	1
1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
3	2	1	1	1	1	1	2	1	3	2	2	4	8	3	2	2	3
2	2	1	1	1	2	1	2	1	3	3	3	4	8	3	2	2	2
4	2	1	1	1	1	1	1	1	4	3	3	3	4	2	2	1	1
2	1	1	1	1	1	1	2	1	3	2	2	2	8	3	2	2	5
2	2	2	1	2	2	2	2	1	3	3	4	4	5	3	2	2	5
4	1	1	1	1	2	1	2	1	4	3	4	2	5	3	2	2	2
2	2	1	1	2	2	1	1	1	2	2	4	2	8	3	2	2	1
2	2	1	1	1	1	1	2	1	2	3	3	3	5	2	1	2	1
2	2	1	1	1	1	1	2	1	2	2	2	3	8	3	1	2	1
2	2	1	1	1	2	1	2	1	3	3	4	2	8	3	2	2	2
3	1	1	1	1	1	1	2	1	3	2	2	2	8	1	1	1	1
4	2	2	1	2	2	1	2	1	1	2	2	1	3	1	2	2	2
2	2	2	1	1	2	1	1	1	2	3	2	3	3	2	1	1	1
3	2	2	1	2	2	1	2	1	2	3	3	4	2	2	2	1	1
2	1	1	1	1	1	1	1	1	1	2	2	3	3	1	2	2	1
2	1	1	1	1	1	1	2	1	3	2	4	4	4	3	2	2	5
2	1	1	1	1	1	1	2	1	2	2	4	2	8	3	2	2	3
3	2	1	1	1	1	1	1	1	2	2	3	3	3	3	1	1	2
2	2	1	1	1	2	1	2	1	2	3	2	2	4	2	1	1	2
3	2	1	1	1	1	1	1	1	2	2	3	3	5	1	1	1	1
3	2	1	1	1	2	1	1	1	2	2	4	3	4	1	2	2	2
2	1	1	1	1	2	1	2	1	3	3	4	2	8	3	2	2	3
2	2	1	1	1	1	1	2	1	2	2	3	3	2	3	2	2	2
2	1	1	1	1	1	1	2	1	2	2	2	2	4	1	2	1	2
3	2	1	1	2	2	1	1	1	2	2	4	3	2	1	2	2	3
4	1	1	1	1	1	1	2	1	3	3	2	2	4	2	2	2	2
2	2	1	1	1	1	1	2	1	4	3	4	2	7	3	2	2	5
3	2	1	1	1	1	1	2	1	2	3	3	3	8	2	2	2	1
2	2	1	1	1	2	1	2	1	4	3	4	4	8	3	2	2	7
3	2	1	1	1	2	1	1	1	2	3	4	2	4	1	1	1	1
2	2	1	1	1	1	1	2	1	2	3	3	3	5	3	1	2	1
2	1	1	1	1	1	1	1	1	2	3	3	3	8	3	1	1	1
4	1	1	1	1	2	1	2	1	4	3	4	3	3	3	2	2	5
2	1	1	1	1	1	1	1	1	2	2	2	2	8	1	1	1	1
2	1	1	1	1	2	1	2	1	2	2	2	2	8	2	1	2	2
3	1	1	1	1	1	1	2	1	2	2	4	4	2	3	2	1	1
3	1	1	1	1	2	1	2	1	2	2	4	3	8	2	2	2	1
4	1	1	1	1	1	1	2	1	3	2	2	4	3	2	2	1	1
4	2	2	1	1	2	1	2	1	2	2	3	3	8	3	2	2	2
2	1	1	1	1	2	1	2	1	3	2	2	2	4	3	1	2	5
4	2	1	1	2	2	1	2	1	3	3	4	2	5	3	2	2	3
2	1	1	1	1	1	1	1	1	1	2	4	3	8	2	2	2	2
2	1	1	1	1	1	1	1	1	2	2	2	3	8	2	1	2	1
2	2	2	2	2	2	1	1	1	2	2	4	3	8	2	2	2	3
3	1	1	1	1	1	1	1	1	2	3	3	3	4	3	1	2	2
4	2	1	1	1	2	1	1	1	2	2	3	3	5	2	1	2	1
3	1	1	1	1	2	1	2	1	4	2	2	2	4	3	2	2	7
2	2	1	1	1	1	1	2	1	3	3	3	3	3	2	1	2	1
2	2	1	1	1	2	1	2	1	2	2	3	3	4	2	1	2	1
2	1	1	1	1	2	1	2	1	2	2	2	4	8	1	2	2	2
3	2	1	1	1	2	1	2	1	3	2	4	3	4	2	2	2	2
2	2	1	1	1	1	1	2	1	4	3	4	2	8	2	1	2	4
4	2	2	2	2	2	1	2	1	4	3	4	4	7	3	2	2	6
4	1	1	1	1	1	1	2	1	4	2	4	2	8	3	2	2	6
3	2	1	1	1	1	1	2	1	2	3	3	3	5	2	2	1	1
2	2	1	1	1	2	1	2	1	2	2	4	4	5	3	2	2	1
3	2	2	2	2	2	1	2	1	2	3	3	3	4	3	2	2	7
1	1	1	1	1	2	1	2	1	2	2	1	1	2	1	1	1	2
2	1	1	1	1	2	1	2	1	3	3	2	2	4	3	2	2	6
2	2	1	1	1	1	1	1	1	2	3	3	3	3	3	1	2	1
3	1	1	1	2	2	2	1	3	1	1	2	1	5	3	1	1	7
2	2	1	1	1	1	1	1	1	2	3	3	3	2	2	2	2	1
2	1	1	1	1	1	1	2	1	2	2	4	4	8	2	1	2	2
2	2	1	1	1	2	1	2	1	2	3	3	3	5	3	2	2	1
3	2	1	1	2	2	1	2	1	2	2	4	3	5	2	2	2	4
2	1	1	1	1	1	1	1	1	1	1	1	1	3	1	2	2	1
2	2	1	1	1	2	1	2	1	3	3	3	3	8	3	2	2	4
2	1	1	1	1	1	1	2	1	2	2	4	2	2	1	2	2	1
2	2	2	1	2	2	1	2	1	3	3	4	3	4	3	2	2	6

];
Y = [3
2
3
3
2
2
2
2
3
3
2
2
2
3
4
2
2
2
2
2
3
3
2
2
3
3
3
3
2
3
3
3
2
2
2
2
4
3
3
3
3
3
2
2
4
3
2
2
2
2
2
3
2
2
2
3
3
2
3
2
3
2
3
2
2
3
3
2
3
3
2
3
2
3
3
2
2
2
1
3
3
2
3
3
3
2
2
2
3
2
3
2
2
2
3
3
2
2
2
2
3
2
2
2
2
3
2
3
2
2
2
3
2
3
3
3
3
2
3
3
2
2
2
2
2
3
2
2
3
2
2
3
3
2
2
2
1
3
2
4
2
3
2
3
2
3
2
2
];

[m,n] = size(X);
p     = 0.80;
idx   = randperm(m);
XT    = X(idx(1:round(p*m)),:);
Xt    = X(idx(round(p*m)+1:end),:);
YT    = Y(idx(1:round(p*m)),:);
Yt    = Y(idx(round(p*m)+1:end),:);

classificationKNN = fitcknn(XT,YT, 'NumNeighbors',3,'distance','euclidean','distanceweight','equal','Standardize', true);
Loss              = resubLoss(classificationKNN,'lossfun','ClassifError');
Accuracy = -(1 - Loss);

label    = predict(classificationKNN,Xt);
count    = 0;
L        = (label);

for i=1:29
   if L(i)==Yt(i)
        count=count+1;
   end
 end
AccuracyT = -((count/29)*100);
end